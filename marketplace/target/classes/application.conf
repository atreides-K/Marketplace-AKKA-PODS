akka {
  loglevel = debug
  log-config-on-start = on # Helpful for debugging config issues

  actor {
    provider = cluster

    serialization-bindings {
      # PHASE 2: Ensure all network messages implement this
      "pods.akka.CborSerializable" = jackson-cbor
    }
  }
  remote {
    artery {
      # PHASE 2: This hostname is fine for --net=host on a single machine
      canonical.hostname = "127.0.0.1"
      # PHASE 2: This default port WILL BE OVERRIDDEN by Java code using -Dexec.args
      # It MUST be overridden for the cluster to form correctly.
      canonical.port = 8000
    }
  }
  cluster {
    # PHASE 2 CHANGE: Seed node MUST point to the primary node's port (e.g., 8083)
    # All nodes use this to find the cluster initially.
    seed-nodes = [
      "akka://ClusterSystem@127.0.0.1:8083"] # Corrected Port

    # PHASE 2: Using SBR (requires akka-cluster-tools dependency in pom.xml)
    downing-provider-class = "akka.cluster.typed.sbr.SplitBrainResolverProvider"

    sharding {
      # PHASE 2: Keep entities alive since persistence isn't used.
      passivate-idle-entity-after = off
      # Consider setting role = "your-role" if using roles, but not strictly needed for this setup
    }
  }

  # Needed for Split Brain Resolver
  cluster.split-brain-resolver {
    active-strategy = keep-majority
    # stable-after = 20s # Default, adjust if needed
  }

  # Allow message capture for debugging (requires akka-diagnostics dependency if used heavily)
  # remote.artery.advanced.flight-recorder {
  #   enabled = on
  #   destination = "target/flight-recorder.afr"
  # }
}