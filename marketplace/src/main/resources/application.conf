akka {
  loglevel = info
  log-config-on-start = off # Helpful for debugging config issues




  actor {
    provider = cluster
    default-dispatcher {
      fork-join-executor {
        parallelism-factor = 2.0 # Default is 1.0 * number of cores
        parallelism-max = 24     # Increase max slightly if you have many cores
      }
    }
    
    serialization-bindings {
      # PHASE 2: Ensure all network messages implement this
      "pods.akka.CborSerializable" = jackson-cbor
    }
  }
  remote {
    artery {
      # PHASE 2: This hostname is fine for --net=host on a single machine
      canonical.hostname = "127.0.0.1"
      # PHASE 2: This default port WILL BE OVERRIDDEN by Java code using -Dexec.args
      # It MUST be overridden for the cluster to form correctly.
      canonical.port = 8000
    }
  }
  cluster {
    # PHASE 2 CHANGE: Seed node MUST point to the primary node's port (e.g., 8083)
    # All nodes use this to find the cluster initially.
    seed-nodes = [
      "akka://ClusterSystem@127.0.0.1:8083"] # Corrected Port
      
    # PHASE 2: Using SBR (requires akka-cluster-tools dependency in pom.xml)
    # downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
    
    sharding {
      # PHASE 2: Keep entities alive since persistence isn't used.
      passivate-idle-entity-after = off
      least-shard-allocation-strategy.rebalance-absolute-limit = 0
      use-role = "product-host"
      
    }
  }

  # Needed for Split Brain Resolver
  cluster.split-brain-resolver {
    active-strategy = keep-majority
    # stable-after = 20s # Default, adjust if needed
  }

 
 
}
blocking-io-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    # Adjust size based on expected concurrent HTTP calls & available cores
    # Start with a reasonable fixed number, e.g., 50-100
    fixed-pool-size = 100
  }
  # Lower throughput indicates threads might block, tells scheduler how many messages
  # to process per thread before switching context (1 is typical for blocking)
  throughput = 1
}

